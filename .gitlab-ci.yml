stages:
  - docs-check
  - lint
  - build
  - scan
  - test

# lint the README using Markdownlint
lint-the-readme:
  stage: docs-check
  allow_failure: True
  image: ruby:2.6.0-alpine3.8
  script:
    - gem install mdl
    - mdl --version
    - >
      mdl
      --rules ~MD046
      README.md

# check the links in the README
check-the-links:
  stage: docs-check
  allow_failure: True
  image: golang:latest
  script:
    - go version
    - go get -v -u github.com/raviqqe/liche
    - liche README.md -v

# Lint the shellfile using Shellcheck
lint-the-scripts:
  stage: lint
  image: koalaman/shellcheck-alpine:stable
  script:
    - shellcheck --version
    - shellcheck get-docker-compose-latest-version.sh

# Lint the Dockerfile using Hadolint
lint-the-dockerfile:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint --version
    - >
      hadolint
      --ignore DL3018
      Dockerfile

.dind_template: &dind
  image: docker:latest
  services:
    - name: docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"

# Build and push to Dockerhub
build-and-push-the-thing:
  stage: build
  <<: *dind
  script:
    - docker build --pull --tag "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"

container-scanning:
  stage: scan
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull ${CI_REGISTRY_IMAGE}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_REGISTRY_IMAGE} || true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json


# Pull and run
run-and-test-the-thing:
  stage: test
  <<: *dind
  script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker run "$CI_REGISTRY_IMAGE"
